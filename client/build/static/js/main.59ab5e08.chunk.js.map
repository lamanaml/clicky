{"version":3,"sources":["components/ShowImages/index.js","components/Wrapper/index.js","components/Navbar/index.js","pages/Game.js","components/Footer/index.js","App.jsx","serviceWorker.js","index.js"],"names":["ShowImages","props","src","image","onClick","onImageClick","id","alt","Wrapper","className","children","Navbar","style","color","textShadow","shadow","message","score","topScore","Game","resetGame","setState","click","shuffleImages","loseGame","winGame","state","includes","console","log","push","length","shuffled","images","i","j","Math","floor","random","this","class","map","food","key","largeImageURL","tags","bind","Component","Footer","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59ab5e08.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\n\nfunction ShowImages(props) {\n  return (\n\n  <div > \n    <img src={props.image}  \n      onClick={()=> props.onImageClick(props.id)}  \n      alt={props.id}/>\n  </div>\n\n  );\n}\n\n\nexport default ShowImages;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n  return (\n//     <nav className=\"navbar navbar-expand-lg navbar-light bg-light\" >\n \n//      <div class=\"container\">\n//        <div class=\"row\">\n//           <div className=\"col-sm-4\">Clicky Game </div>\n//           <div className=\"col-sm-4\"> {props.message} </div>\n//           <div className=\"col-sm-4\"> SCORE: {props.score} | TOP SCORE: {props.topScore} </div>\n//         </div >\n//       </div >\n//     </nav>\n//   );\n// } \n\n<nav className=\"navbar\"><ul><li className=\"title navbar-brand\">Clicky Game\n</li><li style={{color: props.color, textShadow: props.shadow}} className=\"navbar-text center\">{props.message}</li><li style={{textShadow: props.shadow}} className=\"navbar-text score\">Score: {props.score} | Top Score: {props.topScore}</li></ul></nav>);\n\n}\n\nexport default Navbar;\n","\r\nimport React, { Component } from \"react\";\r\n// import API from \"../utilities/API\";\r\n// import Container from \"../components/Container\";\r\nimport ShowImages from \"../components/ShowImages\";\r\nimport Wrapper from \"../components/Wrapper\";\r\nimport images from \"../images.json\";\r\nimport Navbar from \"../components/Navbar\";\r\nimport \"../App.css\";\r\n// import Example from \"../components/Example\";\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      images : images,\r\n      click: [],\r\n      topScore: 0,\r\n      score: 0,\r\n      message: \"Select an image to begin.\",\r\n    };\r\n  };\r\n\r\n   componentDidMount() {\r\n    this.shuffleImages();\r\n  }\r\n\r\n   \r\n\r\n // Function to reset the game state\r\n  resetGame = () => {\r\n      this.setState({\r\n          score: 0,\r\n          click: [],\r\n          message: \"Click an to begin!\"\r\n      });\r\n      this.shuffleImages();\r\n  }\r\n\r\n  // Function for if the user loses the game\r\n  loseGame = () => {\r\n      this.setState({\r\n        message: \"You lost the game!\"\r\n      });\r\n  }\r\n\r\n  // function for if the user wins the game\r\n  winGame = () => {\r\n      this.setState({\r\n        message: \"You won the game!\"\r\n      });\r\n\r\n  }\r\n\r\nonImageClick = (id) => {\r\n  \r\n    if (this.state.click.includes(id)) {\r\n        console.log(id)\r\n        console.log(\"lose game\")\r\n          this.loseGame();\r\n          this.setState({\r\n            click: [],\r\n            score: 0\r\n          });\r\n      } \r\n      else {\r\n          this.state.click.push(id);\r\n          let score = this.state.score + 1;\r\n          let topScore = score > this.state.topScore ? score : this.state.score;\r\n          this.setState({\r\n              score,\r\n              topScore,\r\n              message: \"You guessed correctly!\"\r\n          });\r\n          if (this.state.click.length === 12) {\r\n              this.winGame();\r\n              this.setState({\r\n                click: [],\r\n                score: 0\r\n              });\r\n          }\r\n          this.shuffleImages();\r\n      }\r\n  }\r\n\r\n\r\nshuffleImages = () => {\r\n   let shuffled = this.state.images;\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    this.setState({ images: shuffled  })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n\r\n      \r\n        <div >\r\n\r\n   {/* <Example /> */}\r\n\r\n           <Navbar \r\n          score={this.state.score}\r\n          topScore={this.state.topScore}\r\n          message={this.state.message}\r\n        />\r\n        < p class=\"jumbotron jumbotron-fluid background1\">\r\n          <h1 class=\"display-4 \">Clicky Game!</h1>\r\n          <p class=\"display-5 \"> Click on an image to earn points, but don't click on any more than once!</p>\r\n        </p>\r\n       \r\n<Wrapper>\r\n   \r\n      { this.state.images.map((food) =>{\r\n          return( \r\n          <ShowImages\r\n            key={food.id}\r\n            id={food.id}\r\n            image={food.largeImageURL}\r\n            alt={food.tags}\r\n            onImageClick={this.onImageClick.bind(this)}\r\n            \r\n          />\r\n        )}\r\n        )\r\n      }\r\n    \r\n      \r\n    </Wrapper>\r\n  \r\n  </div>  \r\n\r\n     )}\r\n}\r\n\r\nexport default Game;\r\n\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <span>Clicky Game</span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Game from \"./pages/Game\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        \n          <Route exact path=\"/\" component={Game} />\n        \n        <Footer />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}